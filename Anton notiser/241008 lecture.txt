****Rate monotonic:
Rate monotonic kan preempta. Kortast period har högst prioritet. 
preemptad process är att en task kan pausas. 

U_i = C_i / T_i

U(n) = n* ( 2^(1/n) -1 )

Alla U_i <= U(n) -> schemaläggningsbart. 

Rate monotonic har gör en check varje gång de kommer in en ny task. 

Tenta: Rita ett diagram. Eller kolla om ett diagram är rätt. 

Kolla med JOnathan vad för program han har för att generera Rate monotonic diagram? 

FÖr alla algorithmer som är periodiska så går de inte att shchemalägga ifall Alla U_i > 1

**************************************************************

context switch får inte ta någon tid = Själva bytet av processer får inte ta någon tid. 
Context switch när när processorn byter tasks. 

Ifall context switches är godkänt i tid så behövs de beräknas hur långt tid som ska tas hänsyn till vid 
context switches. 
***************************************************************

***EDF:icke periodiska processer kan stoppas in i en EDF
EDF är den näst vanligaste algorithen efter rate monotonic. 

EDF är dynamisk. 

EDF är schemaläggingsbart ifall ALla U_i <= 1

Tänk alltid hur långt kvar är de till processens deadline. Den körs först. (EARLIST DEADLINE FIRST)

Nackdel med EDF: Ifall Rate monotonic misslyckas med att shcmealäggas. så slänger den bort processer med lägst prioritet
EDF slänger bort processer slumpmässigt. 

*********************************************************************

Deadline monotonic: VÄldigt lik EDF. EDF sorterar på absolut deadline. Deadline monotonic sorterar på relativ deadline. 

***********************************************************

Priority round robin är den vanligaste algortihmen. 

***************************************************************

HUr ser de ut i ett riktigt RTOS: -> priority round robin. 
first come first served fungerar oftast när vi inte preemtar. 

PREEMPT_RT går att slå på Linuxkärnan. FÖr att få realtidssystem. (låst Docker miljö setup för detta).
GÅr att isolsera en kärna på processorn så att de blir dedikterad till just real tids system. 

*****************************************************************

Resurshantering: 
Critical section kallar man det när en process använder en resurs. Just då kan vi inte avbryta den processen. 

*Rover stanna rpå Mars pga att fler processer vill ha samma resurs.. lägs mer

Kolla upp algorithmer för alla resursprioriteter. TEsta att skriva ner vad de olika priotiterterna är bra för. 

***********************************************************

Industriella och realtidsnätverk:
TIme division multiple access. Like timeling schuduling. Round robin över internet. 

LÄs på om Token Ring nätverk. 

INte så viktigt i ett realtids ssytsem att det gå rsnabbt. Det viktiga är att vi har koll på att det fungerar
vid dess worst case. 

Redundans:
Tänk på om grejer går sönder. De borde fungera ändå systemet....

Feedack systemet är för långsamt. PÅ NOTE. Vem kan göra det snabbare. Ingen orkar rapportera. 

parallel path. skicka alltid datan två vägar. 
*********************************************************************

